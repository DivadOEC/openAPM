<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1368156130038" ID="ID_952011627" MODIFIED="1368156203634" TEXT="EEPROM&#x8d44;&#x6e90;&#x6d41;&#x7a0b;">
<node CREATED="1368157117486" ID="ID_956408231" MODIFIED="1368157137765" POSITION="right" TEXT="&#x5bf9;&#x5e94;&#x57fa;&#x7c7b;AP_Param"/>
<node CREATED="1368157147423" ID="ID_667141525" MODIFIED="1368157236406" POSITION="right" TEXT="&#x4e24;&#x4e2a;&#x91cd;&#x8981;&#x7684;&#x7ed3;&#x6784;&#xff1a;"/>
<node CREATED="1368157237412" ID="ID_1371299897" MODIFIED="1368157266211" POSITION="right" TEXT="// &#x4e0b;&#x9762;&#x4e24;&#x4e2a;&#x7ed3;&#x6784;&#x4f53;&#x662f;&#x7406;&#x89e3;EEPROM&#x5728;&#x7cfb;&#x7edf;&#x4e2d;&#x7684;&#x5de5;&#x4f5c;&#x539f;&#x7406;&#x7684;&#x91cd;&#x70b9;&#xff0c;&#x6309;&#x7167;&#x5b83;&#x7684;&#x89e3;&#x91ca;&#xa;//  &#x5728;&#x4e3b;&#x51fd;&#x6570;setup&#x4e2d;&#x88ab;&#x4f20;&#x9012;&#x6765;&#x7ed9;&#x51fa;&#x5404;&#x53d8;&#x91cf;&#x7684;&#x547d;&#x540d;&#x548c;&#x5728;EEPROM&#x4e2d;&#x7684;&#x4f4d;&#x7f6e;&#xa;    struct GroupInfo {&#xa;        uint8_t type; // AP_PARAM_*&#xa;        uint8_t idx;  // identifier within the group&#xa;        const char name[AP_MAX_NAME_SIZE+1];&#xa;        uintptr_t offset; // offset within the object&#xa;        union {&#xa;            const struct GroupInfo *group_info;&#xa;            const float def_value;&#xa;        };&#xa;    };&#xa;    struct Info {&#xa;        uint8_t type; // AP_PARAM_*&#xa;        const char name[AP_MAX_NAME_SIZE+1];&#xa;        uint8_t key; // k_param_*&#xa;        void *ptr;    // pointer to the variable in memory&#xa;        union {&#xa;            const struct GroupInfo *group_info;&#xa;            const float def_value;&#xa;        };&#xa;    };&#xa;"/>
<node CREATED="1368157445486" ID="ID_818625292" MODIFIED="1368157495861" POSITION="right" TEXT="&#x5148;&#x4e0d;&#x7ba1;&#x4e0a;&#x9762;&#x7684;&#x7ed3;&#x6784;&#xff0c;&#x5148;&#x5173;&#x6ce8;&#x8be5;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff1a;"/>
<node CREATED="1368157506089" ID="ID_1436261813" MODIFIED="1368157511979" POSITION="right" TEXT="    // constructor with var_info&#xa;    AP_Param(const struct Info *info, uint16_t eeprom_size) {&#xa;        _eeprom_size = eeprom_size;&#xa;        _var_info = info;&#xa;&#xa;        uint16_t i;&#xa;        for (i=0; pgm_read_byte(&amp;info[i].type) != AP_PARAM_NONE; i++) ;&#xa;        _num_vars = i;&#xa;&#xa;        check_var_info();&#xa;    }"/>
<node CREATED="1368159486470" ID="ID_1210986252" MODIFIED="1368159900243" POSITION="right" TEXT="&#x8be5;&#x51fd;&#x6570;&#x5728;&#x4e3b;&#x6587;&#x4ef6;&#x4e2d;&#x88ab;&#x8c03;&#x7528;&#xff1a;&#xa;// &#x8be5;&#x51fd;&#x6570;&#x7ee7;&#x627f;AP_Param&#x7c7b;&#x4e0b;&#x7684;AP_Param()&#x51fd;&#x6570;,&#x8f7d;&#x5165;&#x5230;_var_info&#x4e2d;&#xa;   AP_Param param_loader(var_info, WP_START_BYTE);&#xa;&#x5176;&#x4e2d;&#xff0c;var_info&#x662f;&#x4e00;&#x4e2a;&#x5728;ArdPlane/Parameters.h&#x4e2d;&#x58f0;&#x660e;&#x7684;&#x5168;&#x5c40;&#x53d8;&#x91cf;&#xff1a;&#xa;   extern const AP_Param::Info var_info[];"/>
<node CREATED="1368167106989" ID="ID_15714561" MODIFIED="1368167419917" POSITION="right" TEXT="&#x5177;&#x4f53;&#x7684;&#x521d;&#x59cb;&#x5316;&#x503c;&#x5927;&#x6982;&#x662f;&#x8fd9;&#x6837;&#x7684;&#xff1a;&#xa;const AP_Param::Info var_info[] PROGMEM = {&#xa;    GSCALAR(format_version,         &quot;FORMAT_VERSION&quot;, 0),&#xa;    GSCALAR(software_type,          &quot;SYSID_SW_TYPE&quot;,  Parameters::k_software_type),&#xa;    GSCALAR(sysid_this_mav,         &quot;SYSID_THISMAV&quot;,  MAV_SYSTEM_ID),&#xa;"/>
<node CREATED="1368167445130" ID="ID_1513901803" MODIFIED="1368167471233" POSITION="right" TEXT="&#x6240;&#x4ee5;&#x6b64;&#x65f6;&#xff0c;&#x53d8;&#x91cf;_var_info&#x4e2d;&#x5c31;&#x662f;&#x4e0a;&#x9762;&#x7684;&#x90a3;&#x4e9b;&#x503c;&#x4e86;"/>
<node CREATED="1368167544292" ID="ID_424913887" MODIFIED="1368168620637" POSITION="right" TEXT="&#x63a5;&#x7740;&#x5728;setup()-&gt;init_ardupilot()-&gt;load_parameters()&#xa;&#xa;static void load_parameters(void)&#xa;{       &#xa;    if (!g.format_version.load() ||&#xa;        g.format_version != Parameters::k_format_version) {&#xa;&#xa;        // erase all parameters&#xa;        cliSerial-&gt;printf_P(PSTR(&quot;Firmware change: erasing EEPROM...\n&quot;));&#xa;        AP_Param::erase_all();&#xa;        // save the current format version&#xa;        g.format_version.set_and_save(Parameters::k_format_version);&#xa;        cliSerial-&gt;println_P(PSTR(&quot;done.&quot;));&#xa;    } else {&#xa;        uint32_t before = micros();&#xa;        // Load all auto-loaded EEPROM variables&#xa;        AP_Param::load_all();&#xa;&#xa;        cliSerial-&gt;printf_P(PSTR(&quot;load_all took %luus\n&quot;), micros() - before);&#xa;    }&#xa;}&#xa;&#xa;"/>
<node CREATED="1368168626014" ID="ID_1111919999" MODIFIED="1368168636962" POSITION="right" TEXT="&#x5177;&#x4f53;&#x7684;load&#x65b9;&#x6cd5;&#xff1a;"/>
<node CREATED="1368168638080" ID="ID_742503556" MODIFIED="1368168804011" POSITION="right" TEXT="// Load all variables from EEPROM&#xa;// &#x5c06;&#x6240;&#x6709;EEPROM&#x6570;&#x636e;&#x5bfc;&#x5165;&#x5230;_var_info&#x4e2d;&#xff0c;&#x4e3b;&#x8981;&#x662f;ptr&#x6307;&#x9488;&#x7684;&#x6620;&#x5c04;&#xa;bool AP_Param::load_all(void)&#xa;{&#xa;    struct Param_header phdr;&#xa;    uint16_t ofs = sizeof(AP_Param::EEPROM_header);&#xa;&#xa;    while (ofs &lt; _eeprom_size) {&#xa;        hal.storage-&gt;read_block(&amp;phdr, ofs, sizeof(phdr));&#xa; // note that this is an || not an &amp;&amp; for robustness&#xa;        // against power off while adding a variable&#xa;        if (phdr.type == _sentinal_type ||&#xa;            phdr.key == _sentinal_key ||&#xa;            phdr.group_element == _sentinal_group) {&#xa;            // we&apos;ve reached the sentinal&#xa;            return true;&#xa;}&#xa;&#xa;        const struct AP_Param::Info *info;&#xa;        void *ptr;&#xa;&#xa;        info = find_by_header(phdr, &amp;ptr);&#xa;        if (info != NULL) {&#xa;            hal.storage-&gt;read_block(ptr, ofs+sizeof(phdr), type_size((enum ap_var_type)phdr.type));&#xa;        }&#xa;    ofs += type_size((enum ap_var_type)phdr.type) + sizeof(phdr);&#xa;    }&#xa;&#xa;    // we didn&apos;t find the sentinal&#xa;    serialDebug(&quot;no sentinal in load_all&quot;);&#xa;    return false;&#xa;}&#xa;"/>
<node CREATED="1368168818873" ID="ID_1484982879" MODIFIED="1368168887955" POSITION="left" TEXT="&#x6b64;&#x5916;&#xff0c;&#x5411;EEPROM&#x4e2d;&#x5199;&#x5165;&#x53c2;&#x6570;&#x662f;&#x5728;MAVLink&#x63a5;&#x6536;&#x5230;&#x76f8;&#x5e94;&#x6570;&#x636e;&#x7684;&#x65f6;&#x5019;&#x5206;&#x522b;&#x5199;&#x5165;"/>
</node>
</map>
